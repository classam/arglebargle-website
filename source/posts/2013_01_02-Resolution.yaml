--- 
content_type: markdown
title: "2013 Resolution Roundup" 
visible: true
created: "2013-01-02T17:00:00-07:00"
categories: ["Misc"]
content: |
  Once again, I am forced to take a reckoning of my 
  [New Years' Resolutions](http://curtis.lassam.net/post/2012_01_01-2011_Resolution_Roundup.html), 
  how I did, and what I plan to do for next year.
  
  - _Thunder Thighs: Lose another 10 lbs_ - **FAIL** - 
  My weight at the beginning of 2012 was ~200lbs, and my weight at
  the beginning of 2013 remains ~200lbs. 
  [Ladies](http://images2.fanpop.com/images/photos/3100000/Zapp-Brannigan-futurama-3153956-1024-768.jpg).
  
  - _Ferrous Chef: Prepare 50 meals for yourself, from scratch_ - **PASS** - 
  I managed to make well more than 50 meals from scratch. 
  Many of them involving beans and rapid constructions therein.  
  
  - _Level Up: Lose the JR from your title._- **TKO** - 
  Technically, yes, this did happen. However, now my title carries an
  implicit 'temporary', which is arguably worse. 
  
  - _If You Build It, They Will Come:  Launch a software product._ - **PASS**.  Yep. 
  
  - _Nah, No Wrimo: Write 10,000 words._ - **FAIL** - 
  I set the bar low - 10,000 words is only a fifth of the requirement for
  NaNoWrimo.  Then my November got really busy, and I abandoned the whole 
  project in favour of more interesting things. 
  
  - _Doodle Poop: Draw 50 Things_ - **TKO** - 
  I'm giving myself another 'technical' on this one. I _meant_ serious drawing
  practice, rather than just the hundred-plus rapid-doodles that go into a Cube
  Drone video or comic. 
  
  - _Unlucky in Love: Something something girlfriend something something._ - **TKO** - 
  Another technical on this one. Forward relationship progress, I think, although
  by the strictest terms I am still a single dude. 
  
  So, out of 7 goals, that's **2** unquestionable PASSes, **2** shameful FAILs, 
  and **3** technical knockouts. Not bad, but not great. 
  
  Grade: **C+**.
  
  But, that's not all. Let's look at some of 2012's Extra Credit!
  
  ## Software Launched! ##
  ### Watchmaker's Dilemma ###
  In early 2012, I launched a Javascript/Python application comprising my first-ever
  video game. 
  
  The play of the game was simple enough - you are given a set of playing 
  pieces, and a board, and you are asked to place the pieces on the board.
  
  The twist: Each piece comes with a specific placement rule, which the user
  is not informed of. The symbol on the piece is a hint to the rule, and the
  user is expected to learn the rules through experimentation. 
  
  The game is carefully written in such a way that if it gives the user a 
  game piece, there is _always_ a valid move for that piece. 
  
  The "[Bishop](https://github.com/classam/blurge/blob/master/tokens.py#L239)" piece, for example, can only be played diagonally to another 
  "Bishop" piece.  The 'Checker' can only be played on dark-coloured tiles. 
  The 'Parasite' can only be placed adjacent to another piece, but not adjacent
  to another 'Parasite'. 
  
  The game was.. okay.  
  There were some architectural issues that hindered gameplay. 
  The game was built as a set of jQuery calls against a Python WSGI server.
  For every request, the Python server would extract the entire game state
  from a MongoDB database, create the world in its entirety, check the validity
  of the game move, and - if valid - hunt through the search space of valid
  'next moves' for the player to make, giving them a random token from the
  set of valid tokens to place. 
  
  This had some key problems: 
  
  * Loading the entire state into memory for every request was dumbstupid slow.
  * With WSGI only serving the Python, not the Javascript, requests to the 
  code's back-end had to be done cross-origin - through JSONP, which makes
  error recovery almost impossible.
  * The only method of error-detection with JSONP is waiting on timeouts- 
  except that the operations that the error-detection is waiting on can take
  anywhere from 50 milliseconds to 4 seconds, depending on what the software
  is doing behind the scenes. 
  * All of this was with, maybe, at most, 2 concurrent users. 
  
  The Watchmaker could, with a rewrite of the networking code (CORS!) and
  the addition of a game-state cache, be playable. But it's probably not
  worth it - because the game itself isn't really that good.
  
  The only people I knew who bothered to try to solve it were Yang and Kerry. 
  (Thanks for playing! Winners don't use drugs! ) 
  
  The code for The Watchmaker's Dilemma lives 
  [on GitHub.](https://github.com/classam/blurge) - which also marks the first
  time that I used Git for a personal project rather than SubVersion, and 
  partially explains why that particular code is so messy. I just emptied my
  entire 'whatever the hell code I feel like writing on the bus' directory into 
  github. I think there's some 
  [MIDI-generation code](https://github.com/classam/blurge/blob/master/melody.py) 
  in there, too. And some stuff for
  [generating probability distributions of names](https://github.com/classam/blurge/blob/master/distribution.py)
  from Census data. 
  
  ### BusBus ###
  I also finished BusBus, my static website generator.
  
  It was part of a project to Learn Ruby For Making Better Programmer. 
  
  So long as you're reading this in early 2013, there's a good chance that
  the site you're looking at _right now_ is generated with BusBus, which 
  takes a [folder full of YAML files](https://github.com/classam/Blog) and a
  [website theme](https://github.com/classam/busbus_theme) as arguments
  argument and spits out a complete website as output.
  
  And it does that pretty well. I can write blog posts in 
  [Markdown](http://daringfireball.net/projects/markdown/),
  using Vim, 
  manage them in Git, and trigger a recompilation of my site on every
  push. 
  
  It's ... well, it's kind-of just for me. I can't imagine anybody else
  would want to use such an awkward combination of tools to manage their
  website, but I certainly like it. 
  
  One thing I do need to implement, though?  Some kind of online preview that 
  doesn't involve me having to install the entire BusBus toolchain and 
  compile the site locally.  BusBus setup is non-trivial, so... 
  
  My solution for now is just - if I don't have the whole toolchain with me -
  run my stuff through a Markdown renderer to see how it looks - and post it to 
  my site, hoping for the best, then trying to catch any obvious errors before
  anybody else gets to the page. >_>
  
  ### Forking Shit ###
  Past that, I finally moved the codebase for [pierc](https://github.com/classam/pierc), 
  an interactive IRC logger and log-browser pair that I wrote 4 years ago, to GitHub.
  
  It has documentation, resolved issues, and people have even forked it.
  
  It's a borderline _real software product_. [Yay](http://www.youtube.com/watch?v=DLTZctTG6cE). 
  
  ### Mr. B, The Gentleman Rhymer ###
  And, near the end of the year, my IRC channel friends noticed the introduction
  of 'reason', a not-particularly intelligent IRC bot that [raps with you](http://curtis.lassam.net/images/reason.PNG).
  
  ## Arty Bullshit ##
  ### Cube Drone ###
  I started a new series, and managed to get further than ever before - 
  11 comics - 
  before losing steam and forgetting that I was supposed to update it regularly.
  
  I still have storylines backburnered for Cube Drone and Section 604 that I haven't 
  put together yet, but comics just take _so much time_. 
  
  ### Cube Drone Video ###
  And then, Cube Drone, the technical office comedy comic with 
  tragically few entries, became something slightly different - 
  a series of instructional videos on technical topics. 
  
  I like humour, and art, and technology, and lecturing people on stuff,
  so [this sort of thing](http://www.youtube.com/watch?v=GSqrmuZQxz0) seems
  like a natural fit for me. It even did.. well, better than usual on reddit. 
  
  No flood of downvotes for me! Even a trickle of subscribers! 
  
  Even with the hokey animation style, though, these things take 
  a long time to finish.  Write an essay, record yourself reading it, then draw
  100 or more images to go with it; Days of effort! 
  
  I'm still searching for a sweet spot of 'informational' and 'interesting'
  and 'technical' and 'worth watching'. I feel like I'm getting closer, though.
  
  More Cube Drone in the new year. 
  
  ### Wasteland ###
  [Post-apocalyptic card game](https://github.com/classam/arkham_gameslab/blob/master/wasteland/rules.md), 
  as well as Ruby software for converting .yaml files 
  and images into post-apocalyptic card-games.
  
  First-ever time manufacturing a physical game. Thanks to the efforts of 
  dedicated and intelligent playtesters, Sean, Craig, Mike, Tyler, Cheryl, 
  and company, pages of mathematics and dozens and dozens of tweaks, 
  this actually turned out to be reasonably fun and playable. It's not 
  _7 Wonders_ good, but it's not _Monopoly_ bad, so, you know. 
  
  Some of the concepts that made it interesting? 
  
  * Survival Co-op:  Instead of being a full co-operative game, it's co-operative in that
  your only goal is to survive, and it is much easier to survive if your co-players survive.
  * Last-minute Knockout.  Even though it's a game where players can - and *do* - get knocked 
  out of the game, numerous playthroughs put 90% of the game's knockouts in the 
  last 2 rounds - partially because of the game's exponentially-increasing-danger die mechanic. 
  * Dice.  Every time you gain a die, you roll all dice of the same colour.  Pairs 
  are bad. Trips are extra-bad. If you ever get a four-of-a-kind, you die. 
  So, picking up a die at the beginning of the game? Harmless. Picking one up at the end of the game? Catastrophic. 
  
  It had its share of problems. Most actions in the game involved taking at 
  least one die - so, by the end game, player actions were hugely restricted by
  the near certainty that picking up certain colours of die would be 
  invariably fatal.  
  
  If you ever want to try it, I have the game's only physical incarnation
  stashed on my Board Game shelf. 
  
  ## Cabin. ##
  ![Cabin.](http://travisbrown.ca/gallery/2012/Weeklong_Brunch/IMG_5300.JPG.800x600.jpeg)
  
  ### Stupid Robot ###
  While I was up at a Cabin in Shuswap with my friends, I took the opportunity
  to grab a sharpie and a wad of paper and draw 30 of the _dumbest comics I have ever written_. 
  Starting [here.](http://curtis.lassam.net/post/2012_07_20-Stupid_Robot_1__Knife_To_Meet_You.html) 
  
  ## Lazy Bean Recipes ##
  ### 15-Minute Baked Beans ###
  1. Dice bacon. 
  2. Fry bacon in pan. 
  1. _(Optional)_ If the pan is too dripping with fat, drain it. 
  3. Apply can of beans to pan. 
  4. Pour molasses, ketchup, brown sugar on top. 
  5. Heat. 
  
  ### 15-Minute Butter-Beans ###
  1. Small amount of oil in pan.
  2. Put beans in pan. 
  3. Dump in a half can of Butter Chicken from the store.
  4. Heat.
  
  ## Conclusion ##
  I'm actually.. surprised at how much stuff I did last year. 
  
  I'm going to upgrade that C+ to a **B**, by virtue of _oddly random extra credit projects_! 
  
  And now, on to...
  
  ## New Resolutions! ##
  
  Except, this time, I'm going to be more specific.  There are going to be
  2013 resolutions, but there's also going to be January resolutions.
  
  ### 2013 ###
  - *1000 Pushups* - Do 1000 (non-consecutive) pushups.
  - *Rhyme* - Create a not-particularly-intelligent artificial intelligence.
  - *Tempo-Tantrum* - Become a permanent employee. 
  - *Return To Cabin* - Return to Travis' Cabin.  Revel.
  - *Indie Street Cred* - Private GitHub repo. 
  - *Vacation, All I Ever Wanted* - Leave the Country for Fun Times.
  
  ### January ###
  - *We'll All Drone On* - Complete a third Cube Drone short. 
  - *Drone Drone* - Draw at least one Cube Drone comic. 
  
  Let's get started! 
